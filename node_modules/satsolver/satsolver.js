/**
 * This file should be placed at the node_modules sub-directory of the directory where you're 
 * executing it.
 * 
 * Written by Fernando Castor in November/2017. 
 */
exports.solve = function(fileName) {
  let formula = readFormula(fileName);
  let result = doSolve(formula.clauses, formula.variables);
  return result // two fields: isSat and satisfyingAssignment
}

// Receives the current assignment and produces the next one
let indice = 0;
let indicemax;
let indice2;

function increase(currentAssignment) {
  let Assignment = currentAssignment;

  if (indice <= indicemax) {

      if (Assignment[indice2] == true) {
          Assignment[indice2] = false;
          indice2--;
          return increase(Assignment);

      } else {
          Assignment[indice2] = true;
          indice2 = currentAssignment.length - 1;
          indice++;
          return Assignment;
      }
  } else {
      return Assignment;
  }

}

function nextAssignment(currentAssignment) {
  indice2 = currentAssignment.length-1;
  let newAssignment = increase(currentAssignment);
  return newAssignment;
}

function doSolve(clauses, assignment) {
  let isSat = false
  let indiceisSat = 0;
  while ((!isSat) && indiceisSat<=indicemax) {
      let formulaSatisfied = true;
      console.log(assignment.toString());
      for (let clause = 0; clause<clauses.length;clause++) { //Diz qual a cláusula que será feito os testes.
        let conectivoOr = false; //conectivo dentro da cláusula

        for (let clausepos = 0;clausepos<clauses[clause].length;clausepos++) {
          let realValue = Math.abs(clauses[clause][clausepos]); //retorna o valor absoluto da posição x da clausula

          if (clauses[clause][clausepos].charAt(0) == '-') {
            conectivoOr = conectivoOr || !assignment[realValue-1]
          } else {
            conectivoOr = conectivoOr || assignment[realValue-1]
          }
        }

        formulaSatisfied = formulaSatisfied && conectivoOr; //conecta as cláusulas com um "e"

      }


      if (formulaSatisfied == true) {
        isSat = true
      } else {
        indiceisSat++;
        assignment = nextAssignment(assignment);
      }
  }
  let result = { 'isSat': isSat, satisfyingAssignment: null }
  if (isSat) {
      result.satisfyingAssignment = assignment;
  }
  return result;
}

function readFormula(fileName) {

  let fs = require('fs');

  let arquivo = fs.readFileSync(fileName, 'utf8').split(/[\r\n]+/);

  let text = [];
  text = arquivo;

  let clauses = readClauses(text);
  let variables = readVariables(clauses);
  indicemax = Math.pow(2,variables.length) - 1;

  function readClauses(text) {
      let arrayclauses = [];
      let temp = [];

      // ler todo o array que foi carregado do arquivo
      for (let i = 0; i < text.length; i++) {

          // se a primeira posição é diferente de p e c então se trata de uma cláusula
          if (text[i].charAt(0) != 'p' && text[i].charAt(0) != 'c' && text[i].length != 0) {

              // verifica se a linha possui todos os itens de uma cláusula
              if (text[i].charAt(text[i].length - 1) == 0) {
                  temp = text[i].split(' ');
                  temp.pop();
                  arrayclauses.push(temp);

              } else {
                  temp = text[i].split(' ');
                  for (let j = i + 1; j < text.length; j++) {
                      if (text[j].charAt(text[j].length - 1) == 0) {
                          let temp2 = text[j].split(' ');
                          let temp3 = temp.concat(temp2);
                          temp3.pop();
                          arrayclauses.push(temp3);
                          i++;
                          break;
                      }
                  }
              }
          }
      }

      return arrayclauses;
  }

  function readVariables(clauses) {
      let variables = [];
      let maiornumero = 0;
      for (let i = 0; i < clauses.length; i++) {
          for (let j = 0; j < clauses[i].length; j++) {
              if (maiornumero < Math.abs(clauses[i][j])) {
                  maiornumero = Math.abs(clauses[i][j]);

              }
          }

      }

      for (let i = 0; i < maiornumero; i++) {
          variables[i] = 0;
      }

      return variables;
  }

  let specOk = checkProblemSpecification(text, clauses, variables);

  function checkProblemSpecification(text, clauses, variables) {
      let numerovariaveis = 0;
      let numeroclausulas = 0;
      let hasp = false;
      for (let i = 0; i < text.length; i++) {
          if (text[i].charAt(0) == 'p') {
              hasp = true;
              let temp = text[i].split(' ');
              numerovariaveis = temp[2];
              numeroclausulas = temp[3];
          }
      }

      if (hasp===true) {
          if ((numerovariaveis == variables.length) && (numeroclausulas == clauses.length)) {
            return true;
        } else {  
            return false;
        }
      } else {
        return true;
      }

      
  }

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
      result.clauses = clauses;
      result.variables = variables;
  }
  return result;

}
